<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">

	<context:annotation-config />

	<!-- DATABASE SETUP -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<!-- <property name="username" value="postgres" /> <property name="password" 
			value="2ggudoou" /> <property name="driverClassName" value="org.postgresql.Driver" 
			/> <property name="url" value="jdbc:postgresql://localhost:5432/demo/attendance" 
			/> -->
		<property name="username" value="sa" />
		<property name="password" value="" />
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:mem:example" />
	</bean>


	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="attendancePU" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
			</bean>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<jpa:repositories base-package="dao" />

	<bean id="calendarDao" class="calendar.CalendarEventDao">
	</bean>

	<bean id="employeeService" class="service.EmployeeServiceImpl">
		<constructor-arg ref="employeeDao" />
		<constructor-arg ref="departmentDao" />
		<constructor-arg ref="passwordEncoder" />
	</bean>

	<bean id="departmentService" class="service.DepartmentServiceImpl">
		<constructor-arg ref="departmentDao" />
	</bean>

	<bean id="roleService" class="service.RoleServiceImpl">
		<constructor-arg ref="roleDao" />
	</bean>


	<bean id="attendRecordTypeService" class="service.AttendRecordTypeServiceImpl">
		<constructor-arg ref="attendRecordTypeDao" />
	</bean>

	<bean id="employeeRoleService" class="service.EmployeeRoleServiceImpl">
		<constructor-arg ref="employeeDao" />
		<constructor-arg ref="roleDao" />
		<constructor-arg ref="employeeRoleDao" />
	</bean>

	<bean id="attendRecordService" class="service.AttendRecordServiceImpl">
		<constructor-arg ref="employeeDao" />
		<constructor-arg ref="attendRecordDao" />
		<constructor-arg ref="attendRecordTypeDao" />
		<constructor-arg ref="eventDao" />
		<constructor-arg ref="calendarDao" />
		<constructor-arg ref="leavesettingDao" />
		<constructor-arg ref="employeeLeaveDao" />
	</bean>

	<bean id="leavesettingService" class="service.LeavesettingServiceImpl">
		<constructor-arg ref="leavesettingDao" />
		<constructor-arg ref="attendRecordTypeDao" />
	</bean>

	<bean id="employeeLeaveService" class="service.EmployeeLeaveServiceImpl">
		<constructor-arg ref="employeeLeaveDao" />
		<constructor-arg ref="employeeDao" />
		<constructor-arg ref="leavesettingDao" />
	</bean>

	<bean id="eventService" class="service.EventServiceImpl">
		<constructor-arg ref="eventDao" />
		<constructor-arg ref="attendRecordDao" />
		<constructor-arg ref="calendarDao" />
		<constructor-arg ref="leavesettingDao" />
		<constructor-arg ref="employeeLeaveDao" />
	</bean>


	<bean id="userDetailService" class="service.UserDetailServiceImpl">
		<constructor-arg ref="employeeDao" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- INIT REST COMPONENTS -->

	<context:component-scan base-package="resources" />

	<!-- SPRING SECURITY SETUP -->

	<bean id="passwordEncoder" class="security.SHA1PasswordEncoder">
	</bean>

	<bean id="csrfHeaderFilter" class="security.CsrfHeaderFilter">
	</bean>

	<bean id="csrfTokenRepository"
		class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository">
		<property name="headerName" value="X-XSRF-TOKEN" />
	</bean>

	<bean id="dataBaseInitializer" class="dao.DataBaseInitializer"
		init-method="initDataBase">
		<constructor-arg ref="employeeDao" />
		<constructor-arg ref="roleDao" />
		<constructor-arg ref="departmentDao" />
		<constructor-arg ref="attendRecordTypeDao" />
		<constructor-arg ref="employeeRoleDao" />
		<constructor-arg ref="leavesettingDao" />
		<constructor-arg ref="attendRecordDao" />
		<constructor-arg ref="employeeLeaveDao" />
		<constructor-arg ref="passwordEncoder" />
	</bean>

	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider
			user-service-ref="userDetailService">
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>


	<security:global-method-security
		secured-annotations="enabled" pre-post-annotations="enabled" />

	<security:http realm="Protected API" use-expressions="true"
		auto-config="true" authentication-manager-ref="authenticationManager">
		<security:intercept-url pattern="/index.html"
			access="permitAll" />
		<security:intercept-url pattern="/login"
			access="permitAll" />
		<security:intercept-url pattern="/rest/auth"
			access="permitAll" />
		<security:intercept-url pattern="/rest/report"
			access="hasRole('admin')" />
		<security:intercept-url pattern="/rest/employeeleave"
			access="hasRole('admin')" />
		<security:intercept-url pattern="/rest/event"
			access="hasRole('admin')" />
		<security:intercept-url pattern="/rest/leavesetting"
			access="hasRole('admin')" />
		<security:intercept-url pattern="/rest/role"
			access="hasRole('admin')" />
		<security:intercept-url pattern="/rest/record"
			access="hasRole('admin')" />
		<security:intercept-url pattern="/rest/recordtype"
			access="hasRole('admin')" />
		<security:intercept-url pattern="/rest/**"
			access="isAuthenticated()" />
		<security:intercept-url pattern="/" access="permitAll" />
		<!-- <security:intercept-url method="GET" pattern="/rest/news/**" access="hasRole('user')" 
			/> <security:intercept-url method="PUT" pattern="/rest/news/**" access="hasRole('admin')" 
			/> <security:intercept-url method="POST" pattern="/rest/news/**" access="hasRole('admin')" 
			/> <security:intercept-url method="DELETE" pattern="/rest/news/**" access="hasRole('admin')" 
			/> -->
		<security:csrf token-repository-ref="csrfTokenRepository" />
		<security:custom-filter ref="csrfHeaderFilter"
			after="CSRF_FILTER" />
		<security:http-basic />
		<security:logout />
	</security:http>

</beans>