<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">

	<context:annotation-config />

	<!-- DATABASE SETUP -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<!-- <property name="username" value="postgres" /> <property name="password" 
			value="2ggudoou" /> <property name="driverClassName" value="org.postgresql.Driver" 
			/> <property name="url" value="jdbc:postgresql://localhost:5432/demo/attendance" 
			/> -->
		<property name="username" value="sa" />
		<property name="password" value="" />
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:mem:example" />
	</bean>


	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="attendancePU" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
			</bean>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<bean id="employeeDao" class="dao.jpa.JpaEmployeeDao">
	</bean>

	<bean id="employeeService" class="service.EmployeeServiceImpl">
		<constructor-arg ref="employeeDao" />
	</bean>

	<bean id="departmentDao" class="dao.jpa.JpaDepartmentDao">
	</bean>

	<bean id="departmentService" class="service.DepartmentServiceImpl">
		<constructor-arg ref="departmentDao" />
	</bean>

	<bean id="jobTypeDao" class="dao.jpa.JpaJobTypeDao">
	</bean>

	<bean id="jobTypeService" class="service.JobTypeServiceImpl">
		<constructor-arg ref="jobTypeDao" />
	</bean>

	<bean id="roleDao" class="dao.jpa.JpaRoleDao">
	</bean>

	<bean id="roleService" class="service.RoleServiceImpl">
		<constructor-arg ref="roleDao" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- INIT REST COMPONENTS -->

	<context:component-scan base-package="resources" />

	<bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" />

	<!-- SPRING SECURITY SETUP -->

	<bean id="passwordEncoder" class="security.SHA1PasswordEncoder">
	</bean>

	<bean id="csrfHeaderFilter" class="security.CsrfHeaderFilter">
	</bean>

	<bean id="csrfTokenRepository"
		class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository">
		<property name="headerName" value="X-XSRF-TOKEN" />
	</bean>

	<bean id="dataBaseInitializer" class="dao.DataBaseInitializer"
		init-method="initDataBase">
		<constructor-arg ref="employeeDao" />
		<constructor-arg ref="roleDao" />
		<constructor-arg ref="departmentDao" />
		<constructor-arg ref="passwordEncoder" />
	</bean>

	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider
			user-service-ref="employeeDao">
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>

	<security:http realm="Protected API" use-expressions="true"
		auto-config="false" create-session="stateless" entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="authenticationManager">
		<security:custom-filter ref="authenticationTokenProcessingFilter"
			position="FORM_LOGIN_FILTER" />
		<security:intercept-url pattern="/rest/auth/authenticate"
			access="permitAll" />
		<!-- <security:intercept-url method="GET" pattern="/rest/news/**" access="hasRole('user')" 
			/> <security:intercept-url method="PUT" pattern="/rest/news/**" access="hasRole('admin')" 
			/> <security:intercept-url method="POST" pattern="/rest/news/**" access="hasRole('admin')" 
			/> <security:intercept-url method="DELETE" pattern="/rest/news/**" access="hasRole('admin')" 
			/> -->
		<security:csrf token-repository-ref="csrfTokenRepository" />
		<security:custom-filter ref="csrfHeaderFilter"
			after="CSRF_FILTER" />
	</security:http>


	<bean id="unauthorizedEntryPoint" class="security.UnauthorizedEntryPoint" />

	<bean class="security.AuthenticationTokenProcessingFilter" id="authenticationTokenProcessingFilter">
		<constructor-arg ref="employeeDao" />
	</bean>

</beans>